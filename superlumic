#!/bin/bash

BGreen='\e[1;32m'       # Green
BRed='\e[1;31m'         # Red
Color_Off='\e[0m'       # Text Reset

function setStatusMessage {
    printf "${IRed} --> ${BGreen}$1${Color_Off}\n" 1>&2
}

repo=$1
if [ ! -z "$2" ]; then
    username=$2
fi

function triggerError {
    printf "${BRed} --> $1 ${Color_Off}\n" 1>&2
    exit 1
}

# Check whether a command exists - returns 0 if it does, 1 if it does not
function exists {
  if command -v $1 >/dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}

# credits https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
    # Get and install Xcode CLI tools
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
        # create the placeholder file that's checked by CLI updates' .dist code
        # in Apple's SUS catalog
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        # find the CLI Tools update
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
        # install it
        softwareupdate -i "$PROD" --verbose
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
        [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
        [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

        TOOLS=clitools.dmg
        curl "$DMGURL" -o "$TOOLS"
        TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
        hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
        if [ "$OSX_VERS" -eq 7 ]; then
            # using '-allowUntrusted' because Lion CLI tools are so old Apple never built another
            # package that doesn't have an expired CA cert. (Expired February 15, 2015)
            installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -allowUntrusted -target /
        else
            installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
        fi
        hdiutil detach "$TMPMOUNT"
        rm -rf "$TMPMOUNT"
        rm "$TOOLS"
        exit
    fi
}

export HOMEBREW_CASK_OPTS="--appdir=/Applications"
export PATH=$HOME/Library/Python/2.7/bin:$PATH

if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    setStatusMessage "Install the CLT"
    install_clt
fi

# Install Ansible
if ! exists pip; then
    setStatusMessage "Install PIP"
    curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    PYTHONWARNINGS=ignore:DEPRECATION python get-pip.py --user
    #sudo easy_install --quiet pip
fi
if ! exists ansible; then
    setStatusMessage "Install Ansible"
    #pip install --upgrade setuptools --user python
    PYTHONWARNINGS=ignore:DEPRECATION python -m pip install --user -q ansible
fi

if [ -d "mac-dev-playbook" ]; then
    setStatusMessage "Updating mac-dev-playbook"
    cd mac-dev-playbook
    git pull -q
else
    if [ ! -z "$repo" ]; then
        setStatusMessage "Getting your config from your fork"
        git clone -q $1 mac-dev-playbook
        cd mac-dev-playbook
    else
        setStatusMessage "Getting the default config"
        git clone -q https://github.com/geerlingguy/mac-dev-playbook.git mac-dev-playbook
        cd mac-dev-playbook
    fi
fi

setStatusMessage "Get all the required roles"
ansible-galaxy install --force-with-deps -r requirements.yml

setStatusMessage "Running the ansible playbook for $username"
ansible-playbook main.yml -i inventory -K
